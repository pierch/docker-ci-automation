---
name: 10 Build and Smoke Test

on:
  push:
    branches:
      - main
  pull_request:

permissions: read-all

jobs:
  build-image:
    name: Build Images
    runs-on: ubuntu-latest

    permissions:
      packages: write # needed to push docker image to ghcr.io

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      #NEW: (START) ############################################################
      - name: Login to ghcr.io registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push to GHCR
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ghcr.io/pierch/docker-ci-automation:${{ github.run_id }}
          target: test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - uses: AbsaOSS/k3d-action@v2
        with:
          cluster-name: "test-cluster-1"
          args: >-
            --agents 1
            --no-lb
            --k3s-arg "--no-deploy=traefik,servicelb,metrics-server@server:*"
      - name: Wait for k3d cluster to be ready
        run: |
          echo "Waiting for cluster nodes to be Ready..."
          kubectl wait --for=condition=Ready nodes --all --timeout=90s

          echo "Waiting for Core Kubernetes services to be Ready..."
          kubectl wait --for=condition=Ready pod -n kube-system --all --timeout=90s

          echo "Ensuring namespace 'myappspace' exists..."
          kubectl create namespace myappspace || true

          echo "Waiting for all pods in 'myappspace' to be Ready..."
          kubectl wait --for=condition=Ready pod -n myappspace --all --timeout=90s || true

          echo "Cluster and namespace are ready!"
          kubectl get nodes -o wide
          kubectl get pods -A
      - name: Smoke test deployment in k3d Kubernetes
        run: |
          kubectl create secret docker-registry regcred \
            --docker-server=https://ghcr.io \
            --docker-username=${{ github.actor }} \
            --docker-password=${{ secrets.GITHUB_TOKEN }} \
            --namespace=myappspace
          export TESTING_IMAGE=ghcr.io/pierch/docker-ci-automation:"$GITHUB_RUN_ID"
          envsubst < manifests/deployment.yaml  | kubectl apply -f -
          kubectl rollout status deployment myapp -n myappspace
          kubectl exec deploy/myapp -n myappspace -- curl --fail localhost
      #NEW: (END) ############################################################
      - name: Docker Metadata for Final Image Build
        id: docker_meta
        uses: docker/metadata-action@v5
        with:
          images: pierch/docker-ci-automation,ghcr.io/pierch/docker-ci-automation
          flavor: |
            latest=false
          tags: |
            type=raw,value=10
          # comment these out on all but 04-add-metadata.yaml to avoid overwriting image tags
          # type=raw,value=latest,enable=${{ endsWith(github.ref, github.event.repository.default_branch) }}
          # type=ref,event=pr
          # type=ref,event=branch
          # type=semver,pattern={{version}}

      - name: Docker Build and Push to Docker Hub
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # comma seperated list of what OS and architechtures to build for (in parallel)
          # default is linux/amd64 (the OS of the runner) but you can add more
          # adding linux/arm64 is recommended for Apple Silicon, Raspberry Pi, AWS Graviton, etc.
          # linux/arm/v7 is for 32-bit ARM devices like Raspberry Pi 2/3
          platforms: linux/amd64,linux/arm64
